-- MM2 Beach Ball Autofarm Script (Educational Purposes Only)
-- Designed for Summer Event 2025, based on common MM2 mechanics

-- Configuration settings
_G.AutofarmSettings = {
    AntiAfk = true, -- Prevents AFK kicks
    DelayFarm = 2.15, -- Delay between collection attempts (seconds)
    ResetWhenFullBag = true, -- Resets character when inventory is full (if applicable)
    CoinType = "BeachBall", -- Target object name (may need adjustment)
    Disable3DRendering = false, -- Optional performance optimization
    ImproveFPS = false, -- Optional performance optimization
    StartAutofarm = true -- Set to true to start autofarming immediately
}

-- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

-- Player and character
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local humanoid = character:WaitForChild("Humanoid")

-- Anti-AFK function
local function preventAfk()
    if _G.AutofarmSettings.AntiAfk then
        local VirtualUser = game:GetService("VirtualUser")
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new()) -- Simulates user activity
    end
end

-- Function to find and collect beach balls
local function findAndCollectBeachBall()
    local beachBalls = {}
    
    -- Search for beach balls in Workspace
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("BasePart") and obj.Name == _G.AutofarmSettings.CoinType then
            table.insert(beachBalls, obj)
        end
    end
    
    -- Find the closest beach ball
    local closestBall = nil
    local closestDistance = math.huge
    
    for _, ball in pairs(beachBalls) do
        if ball:IsDescendantOf(Workspace) then -- Ensure ball still exists
            local distance = (ball.Position - humanoidRootPart.Position).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestBall = ball
            end
        end
    end
    
    -- Move to the closest beach ball
    if closestBall then
        print("Moving to beach ball at position: ", closestBall.Position)
        humanoid:MoveTo(closestBall.Position)
        humanoid.MoveToFinished:Wait(5) -- Timeout for movement
        
        -- Simulate collection (may need adjustment for MM2 mechanics)
        if (humanoidRootPart.Position - closestBall.Position).Magnitude < 5 then
            -- Fire proximity or touch events if required
            local proximityPrompt = closestBall:FindFirstChildOfClass("ProximityPrompt")
            if proximityPrompt then
                fireproximityprompt(proximityPrompt)
            end
        end
    else
        print("No beach balls found in workspace")
    end
end

-- Reset character if inventory is full (simplified)
local function resetCharacter()
    if _G.AutofarmSettings.ResetWhenFullBag then
        player.Character:BreakJoints() -- Forces respawn
        character = player.CharacterAdded:Wait()
        humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        humanoid = character:WaitForChild("Humanoid")
    end
end

-- Main autofarm loop
local function autofarm()
    while _G.AutofarmSettings.StartAutofarm do
        if character and humanoid and humanoidRootPart and humanoid.Health > 0 then
            preventAfk()
            findAndCollectBeachBall()
            
            -- Check for full inventory (simplified, adjust based on MM2 mechanics)
            if _G.AutofarmSettings.ResetWhenFullBag then
                -- Add logic to detect full inventory if available (e.g., game-specific variable)
                -- For now, reset every 10 collections as a placeholder
                if math.random(1, 10) == 1 then
                    resetCharacter()
                end
            end
        else
            -- Reassign character if lost
            character = player.Character or player.CharacterAdded:Wait()
            humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            humanoid = character:WaitForChild("Humanoid")
        end
        wait(_G.AutofarmSettings.DelayFarm)
    end
end

-- Optimize performance if enabled
if _G.AutofarmSettings.Disable3DRendering then
    RunService:Set3dRenderingEnabled(false)
end
if _G.AutofarmSettings.ImproveFPS then
    game:GetService("Lighting").GlobalShadows = false
    game:GetService("Lighting").Brightness = 0
end

-- Start autofarm
if _G.AutofarmSettings.StartAutofarm then
    autofarm()
end

-- Handle character respawn
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
end)
